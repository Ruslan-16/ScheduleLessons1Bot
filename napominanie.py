import os
import json
import requests
from datetime import datetime, timedelta
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters
import pytz
import logging
import asyncio
from telegram.error import NetworkError, RetryAfter, TimedOut

load_dotenv()
admin_edit_mode = False  # —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ JSON-—Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è

BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))
GITHUB_RAW_URL = "https://raw.githubusercontent.com/Ruslan-16/ScheduleLessons1Bot/main/users.json"

logging.basicConfig(level=logging.INFO)
logging.getLogger('apscheduler').setLevel(logging.DEBUG)

temporary_schedule = {}
user_data = {}
sent_reminders_24h = set()
sent_reminders_1h = set()
local_tz = pytz.timezone('Europe/Moscow')

def load_default_schedule():
    global temporary_schedule
    try:
        with open("users.json", "r", encoding="utf-8") as f:
            data = json.load(f)
            temporary_schedule = {u: d for u, d in data.items() if 'schedule' in d}
    except Exception as e:
        print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ: {e}")
        temporary_schedule = {}

def clean_sent_reminders():
    now = datetime.now(local_tz)
    global sent_reminders_24h, sent_reminders_1h

    def parse_with_tz(dt_str):
        dt = datetime.fromisoformat(dt_str)
        return dt if dt.tzinfo else local_tz.localize(dt)

    sent_reminders_24h = {
        k for k in sent_reminders_24h if parse_with_tz(k[1]) > now
    }
    sent_reminders_1h = {
        k for k in sent_reminders_1h if parse_with_tz(k[1]) > now
    }

def reset_schedule_to_default():
    global temporary_schedule
    try:
        with open("default_users.json", "r", encoding="utf-8") as f:
            default_data = json.load(f)
        with open("users.json", "w", encoding="utf-8") as f:
            json.dump(default_data, f, ensure_ascii=False, indent=4)
        temporary_schedule = default_data
        print("[INFO] –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É")
    except Exception as e:
        print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ: {e}")

async def safe_send(bot, chat_id, text):
    try:
        await bot.send_message(chat_id=chat_id, text=text)
    except RetryAfter as e:
        await asyncio.sleep(e.retry_after)
        await safe_send(bot, chat_id, text)
    except (NetworkError, TimedOut):
        await asyncio.sleep(5)
        await safe_send(bot, chat_id, text)
    except Exception as e:
        print(f"[ERROR] {e}")

async def update_user_data():
    global user_data
    for user in temporary_schedule:
        if user not in user_data:
            user_data[user] = None
    for user in list(user_data.keys()):
        if user not in temporary_schedule:
            del user_data[user]

async def send_reminders_24h(app):
    now = datetime.now(local_tz)
    for user_name, data in temporary_schedule.items():
        chat_id = user_data.get(user_name)
        if not chat_id:
            continue
        for lesson in data['schedule']:
            lesson_datetime = get_lesson_datetime(lesson['day'], lesson['time'])
            reminder_time = lesson_datetime - timedelta(days=1)
            key = (user_name, lesson_datetime.isoformat(), "24h")

            if reminder_time <= now <= reminder_time + timedelta(minutes=15) and key not in sent_reminders_24h:
                text = (
                    f"Hello! üòä –ù–∞–ø–æ–º–∏–Ω–∞–µ–º –æ –í–∞—à–µ–º –ø—Ä–µ–¥—Å—Ç–æ—è—â–µ–º –∑–∞–Ω—è—Ç–∏–∏ –≤ {lesson['day']} –≤ {lesson['time']}.\n"
                    f"–ï—Å–ª–∏ –ø–ª–∞–Ω—ã –∏–∑–º–µ–Ω—è—Ç—Å—è ‚Äì –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç–µ –∑–∞—Ä–∞–Ω–µ–µ. üòâ\n\n"
                    f"‚è∞ –£—Ç—Ä–µ–Ω–Ω–∏–µ –∑–∞–Ω—è—Ç–∏—è (–¥–æ 12:00) ‚Äì –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º –∑–∞ –¥–µ–Ω—å, –∏–Ω–∞—á–µ –∑–∞–Ω—è—Ç–∏–µ —Å–≥–æ—Ä–∞–µ—Ç.\n"
                    f"‚è∞ –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤–æ–∑–º–æ–∂–Ω—ã –¥–æ 20:00 –Ω–∞–∫–∞–Ω—É–Ω–µ (–¥–ª—è –∑–∞–Ω—è—Ç–∏–π –¥–æ 12:00) –∏–ª–∏ –º–∏–Ω–∏–º—É–º –∑–∞ 4 —á–∞—Å–∞ (–¥–ª—è –∑–∞–Ω—è—Ç–∏–π –ø–æ—Å–ª–µ 12:00)."
                )
                await safe_send(app.bot, chat_id, text)
                sent_reminders_24h.add(key)
                print(f"[DEBUG] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 24 —á–∞—Å–∞: {key}")

async def send_reminders_1h(app):
    now = datetime.now(local_tz)
    for user_name, data in temporary_schedule.items():
        chat_id = user_data.get(user_name)
        if not chat_id:
            continue
        for lesson in data['schedule']:
            lesson_datetime = get_lesson_datetime(lesson['day'], lesson['time'])
            reminder_time = lesson_datetime - timedelta(hours=1)
            key = (user_name, lesson_datetime.isoformat(), "1h")

            if reminder_time <= now <= reminder_time + timedelta(minutes=15) and key not in sent_reminders_1h:
                text = (
                    f"Hey there! üïí –ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ —É –í–∞—Å —Å–µ–≥–æ–¥–Ω—è –∑–∞–Ω—è—Ç–∏–µ –ø–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É –≤ {lesson['time']}.\n"
                    f"‚åõÔ∏è –ï—Å–ª–∏ –æ–ø–∞–∑–¥—ã–≤–∞–µ—Ç–µ –Ω–∞ 5‚Äì10 –º–∏–Ω—É—Ç, –ø—Ä–æ—Å—Ç–æ –¥–∞–π—Ç–µ –∑–Ω–∞—Ç—å."
                )
                await safe_send(app.bot, chat_id, text)
                sent_reminders_1h.add(key)
                print(f"[DEBUG] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 1 —á–∞—Å: {key}")

async def test_reminders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π."""
    app = context.application
    await update_user_data()  # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    await send_reminders_24h(app)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 24 —á–∞—Å–∞
    await send_reminders_1h(app)   # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 1 —á–∞—Å
    await update.message.reply_text("–¢–µ—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –∏–ª–∏ Telegram!")

def get_lesson_datetime(day, time_str):
    now = datetime.now(local_tz)
    days = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
    day_idx = days.index(day)
    now_idx = now.weekday()
    days_ahead = (day_idx - now_idx) % 7
    lesson_date = now.date() + timedelta(days=days_ahead)
    lesson_time = datetime.strptime(time_str, "%H:%M").time()

    naive_dt = datetime.combine(lesson_date, lesson_time)
    lesson_datetime = local_tz.localize(naive_dt)

    return lesson_datetime

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_name = update.effective_chat.username
    user_id = update.effective_chat.id
    welcome_text = (
        "Welcome! üòäüëã\n"
        "–Ø ‚Äî –í–∞—à –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ ü§ñüí¨\n"
        "–ë—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –≤–∞–º –æ –∑–∞–Ω—è—Ç–∏—è—Ö, —á—Ç–æ–±—ã –≤—ã –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ üß†‚ú®\n\n"
        "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø—Ä–∏—Ö–æ–¥—è—Ç –∑–∞ –¥–µ–Ω—å –¥–æ –∑–∞–Ω—è—Ç–∏—è –∏ –µ—â—ë —Ä–∞–∑ ‚Äî –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –∑–∞–Ω—è—Ç–∏—è ‚è∞üìÖ\n"
        "–ê –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –∑–∞—Ö–æ—Ç–∏—Ç–µ —Å–∞–º–∏ –∑–∞–≥–ª—è–Ω—É—Ç—å –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ ‚Äî —è –≤—Å–µ–≥–¥–∞ –∫ –≤–∞—à–∏–º —É—Å–ª—É–≥–∞–º! üìñ"
    )

    if user_id == ADMIN_ID:
        user_data[user_name] = user_id
        await update.message.reply_text(welcome_text, reply_markup=menu(True))
    elif user_name in temporary_schedule:
        user_data[user_name] = user_id
        await update.message.reply_text(welcome_text, reply_markup=menu(False))
    else:
        await update.message.reply_text("–í—ã –Ω–µ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏.")

def menu(admin=False):
    buttons = [[KeyboardButton("–°—Ç–∞—Ä—Ç")]]
    if admin:
        buttons.append([KeyboardButton("–í—Å–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"), KeyboardButton("–£—á–µ–Ω–∏–∫–∏")])
        buttons.append([KeyboardButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"), KeyboardButton("–£–¥–∞–ª–∏—Ç—å —É—Ä–æ–∫")])
        buttons.append([KeyboardButton("–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∑–∞–Ω—è—Ç–∏–µ")])
    else:
        buttons.append([KeyboardButton("–ú–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")])
    return ReplyKeyboardMarkup(buttons, resize_keyboard=True)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    user_id = update.effective_chat.id

    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∂–∏–º–∞ (—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, —É–¥–∞–ª–µ–Ω–∏–µ, –ø–µ—Ä–µ–Ω–æ—Å)
    if "mode" in context.user_data:
        mode = context.user_data.pop("mode")
        if mode == "edit":
            await handle_admin_input(update, context)
        elif mode == "delete":
            await handle_delete_input(update, context)
        elif mode == "move":
            await handle_move_input(update, context)
        return

    # 2. –û–±—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
    if text == "–°—Ç–∞—Ä—Ç":
        await start(update, context)
        return
    if text == "–ú–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ":
        await show_my_schedule(update)
        return

    # 3. –ê–¥–º–∏–Ω—Å–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
    if user_id == ADMIN_ID:
        print(f"[DEBUG] –ê–¥–º–∏–Ω –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É: '{text}'")
        if text == "–í—Å–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è":
            await show_all(update)
            return
        if text == "–£—á–µ–Ω–∏–∫–∏":
            await show_users(update)
            return
        if text == "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ":
            context.user_data["mode"] = "edit"
            await edit_schedule_prompt(update, context)
            return
        if text == "–£–¥–∞–ª–∏—Ç—å —É—Ä–æ–∫":
            context.user_data["mode"] = "delete"
            await delete_schedule_prompt(update, context)
            return
        if text == "–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∑–∞–Ω—è—Ç–∏–µ":
            context.user_data["mode"] = "move"
            await move_schedule_prompt(update, context)
            return

    # 4. –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
    await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")

async def handle_move_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.id != ADMIN_ID:
        return

    lines = update.message.text.strip().split("\n", 1)
    if len(lines) != 2:
        await update.message.reply_text("–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å 2 —Å—Ç—Ä–æ–∫–∏: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ JSON.")
        return

    user_name, json_str = lines
    user_name = user_name.strip()

    try:
        data = json.loads(json_str)
    except json.JSONDecodeError:
        await update.message.reply_text("–û—à–∏–±–∫–∞: JSON –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω.")
        return

    required = ("day","time","new_day","new_time")
    missing = [f for f in required if f not in data]
    if missing:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è {missing}")
        return

    if user_name not in temporary_schedule:
        await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    lessons = temporary_schedule[user_name]["schedule"]

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö —É—Ä–æ–∫–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    lesson_list_str = "\n".join([f"{l['day']} {l['time']}" for l in lessons])
    await update.message.reply_text(f"üìã –¢–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n{lesson_list_str}")

    # –ü–æ–∏—Å–∫
    idx = next((i for i, l in enumerate(lessons)
                if l["day"] == data["day"] and l["time"] == data["time"]), None)
    if idx is None:
        await update.message.reply_text("‚ùó –£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–µ–Ω—å/–≤—Ä–µ–º—è –µ—â—ë —Ä–∞–∑.")
        return

    # –ü–µ—Ä–µ–Ω–æ—Å
    lessons[idx]["day"] = data["new_day"]
    lessons[idx]["time"] = data["new_time"]

    with open("users.json", "w", encoding="utf-8") as f:
        json.dump(temporary_schedule, f, ensure_ascii=False, indent=4)

    await update.message.reply_text(
        f"‚úÖ –£—Ä–æ–∫ —É {user_name} –ø–µ—Ä–µ–Ω–µ—Å—ë–Ω:\n"
        f"{data['day']} {data['time']} ‚Üí {data['new_day']} {data['new_time']}"
    )

    chat_id = user_data.get(user_name)
    if chat_id:
        await safe_send(context.bot, chat_id,
                        f"Hey, just a quick note!"
                        f"üîÑ –í–∞—à–µ –∑–∞–Ω—è—Ç–∏–µ {data['day']} –≤ {data['time']} –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –Ω–∞ "
                        f"{data['new_day']} –≤ {data['new_time']}.")

async def move_schedule_prompt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["mode"] = "move"
    await update.message.reply_text(
        """–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ –∑–∞–Ω—è—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:

–ò–º—è–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
{"day": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "time": "10:00", "new_day": "–í—Ç–æ—Ä–Ω–∏–∫", "new_time": "11:30"}

–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –¥–µ–Ω—å –∏ –≤—Ä–µ–º—è —Ç–æ—á–Ω–æ —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å —Ç–µ–∫—É—â–∏–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º."""
    )
    return

async def edit_schedule_prompt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global admin_edit_mode
    admin_edit_mode = True
    await update.message.reply_text(
        """–í–≤–µ–¥–∏—Ç–µ –∏–º—è —É—á–µ–Ω–∏–∫–∞ –∏ –Ω–æ–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:

–ò–º—è–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
{"day": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "time": "10:00", "description": "–¢–µ–º–∞"}

–ü—Ä–∏–º–µ—Ä:
RuslanAlmasovich
{"day": "–°—Ä–µ–¥–∞", "time": "13:00", "description": "–§–∏–∑–∏–∫–∞"}"""
    )

    return

async def delete_schedule_prompt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        """–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:

–ò–º—è–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
{"day": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "time": "10:00"}

–ü—Ä–∏–º–µ—Ä:
RuslanAlmasovich
{"day": "–°—Ä–µ–¥–∞", "time": "13:00"}"""
    )
    context.user_data["awaiting_deletion"] = True

async def handle_admin_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.id != ADMIN_ID:
        return

    lines = update.message.text.strip().split("\n")
    if len(lines) != 2:
        await update.message.reply_text("–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞. –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ JSON —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É.")
        return

    user_name, json_str = lines
    user_name = user_name.strip()

    try:
        new_lesson = json.loads(json_str)

        # üöÄ –í–∞–ª–∏–¥–∞—Ü–∏—è day –∏ time:
        days = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
        if new_lesson["day"] not in days:
            await update.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏.")
            return

        try:
            datetime.strptime(new_lesson["time"], "%H:%M")
        except ValueError:
            await update.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è. –§–æ—Ä–º–∞—Ç HH:MM.")
            return

        # üöÄ –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ
        if user_name not in temporary_schedule:
            await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        temporary_schedule[user_name]["schedule"].append(new_lesson)

        # üöÄ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        with open("users.json", "w", encoding="utf-8") as f:
            json.dump(temporary_schedule, f, ensure_ascii=False, indent=4)

        # üöÄ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        await update.message.reply_text(f"–ù–æ–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è {user_name}.")

        # üöÄ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫—É
        chat_id = user_data.get(user_name)
        if chat_id:
            text = (
                f"üìÖ –ù–æ–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n\n"
                f"{new_lesson['day']} –≤ {new_lesson['time']} ‚Äì {new_lesson.get('description', '')}"
            )
            await safe_send(context.bot, chat_id, text)

    except json.JSONDecodeError:
        await update.message.reply_text("–û—à–∏–±–∫–∞: JSON –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω.")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")

async def handle_delete_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.id != ADMIN_ID:
        return

    lines = update.message.text.strip().split("\n")
    if len(lines) != 2:
        await update.message.reply_text("–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞. –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ JSON —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É.")
        return

    user_name, json_str = lines
    user_name = user_name.strip()

    try:
        to_delete = json.loads(json_str)
        if user_name not in temporary_schedule:
            await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # –£–¥–∞–ª—è–µ–º —É—Ä–æ–∫, –µ—Å–ª–∏ —Å–æ–≤–ø–∞–¥–∞–µ—Ç day –∏ time
        schedule = temporary_schedule[user_name]["schedule"]
        updated_schedule = [
            lesson for lesson in schedule
            if not (lesson["day"] == to_delete["day"] and lesson["time"] == to_delete["time"])
        ]

        if len(updated_schedule) == len(schedule):
            await update.message.reply_text("–£—Ä–æ–∫ —Å —Ç–∞–∫–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        temporary_schedule[user_name]["schedule"] = updated_schedule

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª
        with open("users.json", "w", encoding="utf-8") as f:
            json.dump(temporary_schedule, f, ensure_ascii=False, indent=4)

        await update.message.reply_text(f"–£—Ä–æ–∫ —É–¥–∞–ª—ë–Ω —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name}.")

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫—É
        chat_id = user_data.get(user_name)
        if chat_id:
            await safe_send(context.bot, chat_id, f"Greetings! üëã –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ—Ç–º–µ–Ω—É –∑–∞–Ω—è—Ç–∏—è {to_delete['day']} {to_delete['time']}")

    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")

async def show_my_schedule(update: Update):
    user = update.effective_chat.username
    data = temporary_schedule.get(user)
    if not data:
        await update.message.reply_text("–ù–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.")
        return
    text = "\n".join([f"{l['day']} {l['time']} - {l.get('description','')}" for l in data['schedule']])
    await update.message.reply_text(text)

async def show_all(update: Update):
    text = []
    for user, data in temporary_schedule.items():
        lessons = "\n".join([f"{l['day']} {l['time']} - {l.get('description','')}" for l in data['schedule']])
        text.append(f"{user}:\n{lessons}")
    await update.message.reply_text("\n\n".join(text))

async def show_users(update: Update):
    active_users = [user for user in temporary_schedule if user in user_data]
    if not active_users:
        await update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–µ–Ω–∏–∫–æ–≤.")
    else:
        await update.message.reply_text("\n".join(active_users))

async def delete_lesson(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.id != ADMIN_ID:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    try:
        lines = update.message.text.strip().split("\n")
        if len(lines) != 3:
            await update.message.reply_text("–§–æ—Ä–º–∞—Ç: –ò–º—è–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\\n–î–µ–Ω—å\\n–í—Ä–µ–º—è (HH:MM)")
            return

        user_name, day, time = [line.strip() for line in lines]

        if user_name not in temporary_schedule:
            await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        schedule = temporary_schedule[user_name]["schedule"]
        new_schedule = [l for l in schedule if not (l['day'] == day and l['time'] == time)]

        if len(schedule) == len(new_schedule):
            await update.message.reply_text("–ó–∞–Ω—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        temporary_schedule[user_name]["schedule"] = new_schedule

        with open("users.json", "w", encoding="utf-8") as f:
            json.dump(temporary_schedule, f, ensure_ascii=False, indent=4)

        await update.message.reply_text(f"–ó–∞–Ω—è—Ç–∏–µ {day} {time} —É–¥–∞–ª–µ–Ω–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name}.")

        chat_id = user_data.get(user_name)
        if chat_id:
            await safe_send(context.bot, chat_id, f"‚ùå –ó–∞–Ω—è—Ç–∏–µ –≤ {day} {time} –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –≤–∞—à–µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.")

    except Exception as e:
        await update.message.reply_text(f"[ERROR] {e}")

def schedule_jobs(app):
    scheduler = AsyncIOScheduler()
    scheduler.add_job(update_user_data, "interval", minutes=5)
    scheduler.add_job(clean_sent_reminders, CronTrigger(hour=0))
    scheduler.add_job(send_reminders_24h, "interval", minutes=15, args=[app])
    scheduler.add_job(send_reminders_1h, "interval", minutes=5, args=[app])
    scheduler.add_job(reset_schedule_to_default, CronTrigger(day_of_week='sun', hour=19, minute=00))

    scheduler.start()

def main():
    load_default_schedule()
    app = Application.builder().token(BOT_TOKEN).build()
    schedule_jobs(app)
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, button_handler))
    app.add_handler(CommandHandler("test_reminders", test_reminders))
    app.add_handler(CommandHandler("delete_lesson", delete_lesson))
    app.add_handler(CommandHandler("move_lesson", move_schedule_prompt))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        print(f"[ERROR] {e}")

