import os
import json
import requests
from datetime import datetime, timedelta,timezone
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackContext, filters
import pytz
import logging
import asyncio
from telegram.error import NetworkError, RetryAfter, TimedOut
from asyncio import Semaphore
# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
logging.basicConfig()
logging.getLogger('apscheduler').setLevel(logging.DEBUG)
# --- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
BOT_TOKEN= os.getenv("BOT_TOKEN")
ADMIN_ID= 413537120
GITHUB_RAW_URL = "https://raw.githubusercontent.com/Ruslan-16/ScheduleLessons1Bot/refs/heads/main/users.json"
# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ---
temporary_schedule = {}  # –•—Ä–∞–Ω–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
registered_users = []  # –°–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
list_days = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
days_translation = {
    "Monday": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
    "Tuesday": "–í—Ç–æ—Ä–Ω–∏–∫",
    "Wednesday": "–°—Ä–µ–¥–∞",
    "Thursday": "–ß–µ—Ç–≤–µ—Ä–≥",
    "Friday": "–ü—è—Ç–Ω–∏—Ü–∞",
    "Saturday": "–°—É–±–±–æ—Ç–∞",
    "Sunday": "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
}
user_data = {}  # –ü—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è username -> chat_id
# –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞
server_time = datetime.now(timezone.utc)  # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º UTC
print(f"–°–µ—Ä–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è (UTC): {server_time}")
# –ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
moscow_tz = pytz.timezone('Europe/Moscow')
moscow_time = datetime.now(moscow_tz)
print(f"–ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è: {moscow_time}")
# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–æ–Ω—É –¥–ª—è –ú–æ—Å–∫–≤—ã
local_tz = pytz.timezone('Europe/Moscow')
# –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω–µ
now = datetime.now(pytz.timezone('Europe/Moscow'))  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ú–°–ö
print(f"–¢–µ–∫—É—â–µ–µ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è: {now}")

async def safe_send_message(bot, chat_id, text):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫."""
    try:
        await bot.send_message(chat_id=chat_id, text=text)
    except RetryAfter as e:
        print(f"[WARNING] –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {e.retry_after} —Å–µ–∫—É–Ω–¥.")
        await asyncio.sleep(e.retry_after)
        await safe_send_message(bot, chat_id, text)
    except (NetworkError, TimedOut) as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥.")
        await asyncio.sleep(5)  # –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
        await safe_send_message(bot, chat_id, text)
    except Exception as e:
        print(f"[ERROR] –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

async def get_my_id(update: Update, context: CallbackContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    await update.message.reply_text(f"ADMIN_ID: {update.effective_chat.id}")

sent_reminders_24h = set()
sent_reminders_1h = set()

def calculate_lesson_date(day, time_str, now):
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –±–ª–∏–∂–∞–π—à—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –∑–∞–Ω—è—Ç–∏—è.
    Args:
        day (str): –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∑–∞–Ω—è—Ç–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫").
        time_str (str): –í—Ä–µ–º—è –∑–∞–Ω—è—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ "HH:MM".
        now (datetime): –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è.
    Returns:
        datetime: –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –±–ª–∏–∂–∞–π—à–µ–≥–æ –∑–∞–Ω—è—Ç–∏—è.
    """
    list_days = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]

    # –ò–Ω–¥–µ–∫—Å—ã —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –∏ –¥–Ω—è –∑–∞–Ω—è—Ç–∏—è
    current_day_index = now.weekday()  # 0 - –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, 6 - –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
    lesson_day_index = list_days.index(day)  # –ò–Ω–¥–µ–∫—Å –¥–Ω—è –∑–∞–Ω—è—Ç–∏—è

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —á–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –±—É–¥–µ—Ç –∑–∞–Ω—è—Ç–∏–µ
    if lesson_day_index == current_day_index:
        # –ï—Å–ª–∏ –∑–∞–Ω—è—Ç–∏–µ —Å–µ–≥–æ–¥–Ω—è, –ø—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ –≤—Ä–µ–º—è –∑–∞–Ω—è—Ç–∏—è
        lesson_time = datetime.strptime(time_str, "%H:%M").time()
        if now.time() > lesson_time:
            days_to_lesson = 7  # –ü–µ—Ä–µ–Ω–æ—Å–∏–º –∑–∞–Ω—è—Ç–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é
        else:
            days_to_lesson = 0  # –ó–∞–Ω—è—Ç–∏–µ –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–æ—Å—å
    elif lesson_day_index > current_day_index:
        # –ó–∞–Ω—è—Ç–∏–µ –ø–æ–∑–∂–µ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ
        days_to_lesson = lesson_day_index - current_day_index
    else:
        # –ó–∞–Ω—è—Ç–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ
        days_to_lesson = 7 - (current_day_index - lesson_day_index)

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞—Ç—É –∑–∞–Ω—è—Ç–∏—è
    lesson_date = now.date() + timedelta(days=days_to_lesson)

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
    lesson_time = datetime.strptime(time_str, "%H:%M").time()
    lesson_datetime = datetime.combine(lesson_date, lesson_time)

    return lesson_datetime

async def send_reminders_1h(application):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 1 —á–∞—Å –¥–æ –∑–∞–Ω—è—Ç–∏–π."""
    now = datetime.now(pytz.timezone('Europe/Moscow'))  # –¢–µ–∫—É—â–µ–µ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
    global sent_reminders

    print(f"[DEBUG] send_reminders_1h –∑–∞–ø—É—â–µ–Ω –≤ {now}")

    for user_name, lessons in temporary_schedule.items():
        if user_name not in user_data:
            print(f"[DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
            continue

        chat_id = user_data[user_name]

        for lesson in lessons:
            try:
                day = lesson['day']
                time_str = lesson['time']
                description = lesson.get('description', '')

                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –∑–∞–Ω—è—Ç–∏—è
                lesson_date = calculate_lesson_date(day, time_str, now)
                lesson_datetime = lesson_date.astimezone(local_tz)
                reminder_1h_before = lesson_datetime - timedelta(hours=1)
                reminder_5m_window_end = reminder_1h_before + timedelta(minutes=15)
                reminder_key_1h = (user_name, lesson_datetime.isoformat(), "1 —á–∞—Å")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                if reminder_1h_before <= now <= reminder_5m_window_end and reminder_key_1h not in sent_reminders_1h:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await application.bot.send_message(
                        chat_id=chat_id,
                        text=f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —É –≤–∞—Å –∑–∞–Ω—è—Ç–∏–µ —á–µ—Ä–µ–∑ 1 —á–∞—Å!\n\n"
                             f"üìÖ {day}, {time_str} –ø–æ –ú–°–ö\n"
                             f"–û–ø–∏—Å–∞–Ω–∏–µ: {description or '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}\n\n"
                             "–£–¥–∞—á–∏ –Ω–∞ –∑–∞–Ω—è—Ç–∏–∏! üòä"
                    )
                    sent_reminders_1h.add(reminder_key_1h)
                    print(f"[DEBUG] –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 1 —á–∞—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {reminder_key_1h}")

            except Exception as e:
                print(f"[ERROR] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–Ω—è—Ç–∏—è: {lesson}. –û—à–∏–±–∫–∞: {e}")
                print(
                    f"[DEBUG] lesson_datetime: {lesson_datetime}, reminder_1h_before: {reminder_1h_before}, now: {now}")
                print(f"[DEBUG] reminder_5m_window_end: {reminder_5m_window_end}")

async def send_reminders_24h(application):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 24 —á–∞—Å–∞ –¥–æ –∑–∞–Ω—è—Ç–∏–π."""
    now = datetime.now(pytz.timezone('Europe/Moscow'))  # –¢–µ–∫—É—â–µ–µ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
    global sent_reminders

    print(f"[DEBUG] send_reminders_24h –∑–∞–ø—É—â–µ–Ω –≤ {now}")

    for user_name, lessons in temporary_schedule.items():
        if user_name not in user_data:
            print(f"[DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
            continue

        chat_id = user_data[user_name]

        for lesson in lessons:
            try:
                day = lesson['day']
                time_str = lesson['time']
                description = lesson.get('description', '')

                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –∑–∞–Ω—è—Ç–∏—è
                lesson_date = calculate_lesson_date(day, time_str, now)
                lesson_datetime = lesson_date.astimezone(local_tz)

                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 24 —á–∞—Å–∞
                reminder_24h_before = lesson_datetime - timedelta(days=1)

                # –°–æ–∑–¥–∞—ë–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                reminder_key_24h = (user_name, lesson_datetime.isoformat(), "24 —á–∞—Å–∞")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                # now –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 15 –º–∏–Ω—É—Ç –æ—Ç reminder_24h_before
                reminder_window_start = reminder_24h_before
                reminder_window_end = reminder_24h_before + timedelta(minutes=15)

                print(f"[DEBUG] reminder_24h_before: {reminder_24h_before}, "
                      f"reminder_window_start: {reminder_window_start}, "
                      f"reminder_window_end: {reminder_window_end}")

                if reminder_window_start <= now <= reminder_window_end and reminder_key_24h not in sent_reminders_24h:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await application.bot.send_message(
                        chat_id=chat_id,
                        text=f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —É –≤–∞—Å –∑–∞–Ω—è—Ç–∏–µ —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞.\n\n"
                             f"üìÖ {day}, {time_str} –ø–æ –ú–°–ö\n"
                             f"–û–ø–∏—Å–∞–Ω–∏–µ: {description or '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}\n\n"
                             "–ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∑–∞—Ä–∞–Ω–µ–µ! üëç"
                    )
                    sent_reminders_24h.add(reminder_key_24h)
                    print(f"[DEBUG] –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 24 —á–∞—Å–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {reminder_key_24h}")

            except Exception as e:
                print(f"[ERROR] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–Ω—è—Ç–∏—è: {lesson}. –û—à–∏–±–∫–∞: {e}")
                print(f"[DEBUG] lesson_datetime: {lesson_datetime}, now: {now}")

    print(f"[DEBUG] –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 24 —á–∞—Å–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã: {sent_reminders_24h}")

async def send_reminders(application):
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π."""
    await update_user_data()  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    clean_sent_reminders()  # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è

    now = datetime.now(local_tz)  # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–π –∑–æ–Ω–µ

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    await send_reminders_24h(application, now)
    await send_reminders_1h(application, now)

    # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
    print(f"[DEBUG] –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ sent_reminders: {sent_reminders}")
# --- –§—É–Ω–∫—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è ---
last_valid_schedule = {}

def load_default_schedule():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å GitHub."""
    global last_valid_schedule
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL
        github_raw_url = GITHUB_RAW_URL.replace("github.com", "raw.githubusercontent.com").replace("/blob/", "/")
        response = requests.get(github_raw_url, timeout=10)
        response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞

        # –ü–∞—Ä—Å–∏–º JSON-–¥–∞–Ω–Ω—ã–µ
        schedule = response.json()
        print("[DEBUG] –ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:", schedule)  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        valid_schedule = {}
        for user, data in schedule.items():
            if not isinstance(data, dict) or 'schedule' not in data:
                print(f"[WARNING] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                continue

            if not isinstance(data['schedule'], list):
                print(f"[WARNING] –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user} –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                continue

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
            valid_lessons = []
            for lesson in data['schedule']:
                if not isinstance(lesson, dict) or 'day' not in lesson or 'time' not in lesson:
                    print(f"[WARNING] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —É—Ä–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user}: {lesson}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                    continue
                valid_lessons.append(lesson)

            if valid_lessons:
                valid_schedule[user] = {"name": data.get("name", "–ë–µ–∑ –∏–º–µ–Ω–∏"), "schedule": valid_lessons}
            else:
                print(f"[WARNING] –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user} –Ω–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö —É—Ä–æ–∫–æ–≤. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤–∞–ª–∏–¥–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        if valid_schedule:
            last_valid_schedule = valid_schedule
            print("[DEBUG] –ü–æ—Å–ª–µ–¥–Ω–µ–µ –≤–∞–ª–∏–¥–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")
        else:
            print("[WARNING] –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –≤–∞–ª–∏–¥–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.")

        return valid_schedule

    except requests.RequestException as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å GitHub: {e}")
    except json.JSONDecodeError as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
    except Exception as e:
        print(f"[ERROR] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤–∞–ª–∏–¥–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    if last_valid_schedule:
        print("[WARNING] –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤–∞–ª–∏–¥–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.")
        return last_valid_schedule

    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å
    print("[ERROR] –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å.")
    return {}

def reset_schedule():
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É."""
    global temporary_schedule
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ñ–æ—Ä–º–∞—Ç–∞
        new_schedule = load_default_schedule()
        if not new_schedule or not isinstance(new_schedule, dict):  # –ï—Å–ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É—Å—Ç–æ–µ –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
            raise ValueError("–ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø—É—Å—Ç–æ–µ –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ!")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        validated_schedule = {}
        for user, data in new_schedule.items():
            if not isinstance(data, dict) or not isinstance(data.get('schedule'), list):
                print(f"[WARNING] –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user} –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                continue
            # –î–æ–±–∞–≤–ª—è–µ–º –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –Ω–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            validated_schedule[user] = data

        if not validated_schedule:  # –ï—Å–ª–∏ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            raise ValueError("–ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–∫–∞–∑–∞–ª–æ—Å—å –ø—É—Å—Ç—ã–º!")

        # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        temporary_schedule = validated_schedule
        print("[DEBUG] –¢–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞:", temporary_schedule)

    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")

    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    clean_sent_reminders()

def clean_sent_reminders():
    global sent_reminders_24h, sent_reminders_1h
    now = datetime.now(pytz.timezone('Europe/Moscow'))

    # –û—á–∏—Å—Ç–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞ 24 —á–∞—Å–∞
    sent_reminders_24h = {
        key for key in sent_reminders_24h
        if datetime.fromisoformat(key[1]).astimezone(pytz.timezone('Europe/Moscow')) > now
    }

    # –û—á–∏—Å—Ç–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞ 1 —á–∞—Å
    sent_reminders_1h = {
        key for key in sent_reminders_1h
        if datetime.fromisoformat(key[1]).astimezone(pytz.timezone('Europe/Moscow')) > now
    }

    # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
    print(f"[DEBUG] –£—Å—Ç–∞—Ä–µ–≤—à–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—á–∏—â–µ–Ω—ã.")
    print(f"[DEBUG] –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 24 —á–∞—Å–∞ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏: {len(sent_reminders_24h)}")
    print(f"[DEBUG] –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 1 —á–∞—Å –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏: {len(sent_reminders_1h)}")
# --- –§—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ ---
async def start(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start."""
    user_id = update.effective_chat.id
    user_name = update.effective_chat.username

    if not user_name:
        await update.message.reply_text(
            "–£ –≤–∞—Å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω username –≤ Telegram. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ username –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É."
        )
        return

    # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ user_data
    if user_id == ADMIN_ID:
        user_data[user_name] = user_id
        print(f"[DEBUG] –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ user_data: {user_name} -> {user_id}")
        await update.message.reply_text(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_menu(is_admin=True)
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ username –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
    if user_name not in temporary_schedule:
        await update.message.reply_text(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–∞—Å –Ω–µ—Ç –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, –µ—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞."
        )
        return
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data[user_name] = user_id
    print(f"[DEBUG] User {user_name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ user_data: {user_name} -> {user_id}")

    # –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º user_data
    await update_user_data()

    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è! üëã\n"
        "–í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É–∂–µ –≥–æ—Ç–æ–≤–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ. üëá",
        reply_markup=get_main_menu(is_admin=False)
    )

async def update_user_data():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    global user_data
    global temporary_schedule

    print("[DEBUG] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ user_data –Ω–∞—á–∞–ª–æ—Å—å...")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏ —É–¥–∞–ª—è–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ
    for user, data in list(temporary_schedule.items()):
        if not isinstance(data, list):  # –ï—Å–ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —Å–ø–∏—Å–æ–∫
            print(f"[WARNING] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user}. –£–¥–∞–ª—è–µ–º.")
            del temporary_schedule[user]
            continue

        # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è
        temporary_schedule[user] = [
            lesson for lesson in data if isinstance(lesson, dict) and 'day' in lesson and 'time' in lesson
        ]

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    for user_name in temporary_schedule.keys():
        if user_name not in user_data:
            user_data[user_name] = None  # –ü–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è —á–µ—Ä–µ–∑ /start
            print(f"[DEBUG] –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {user_name}")

    # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
    for user_name in list(user_data.keys()):
        if user_name not in temporary_schedule:
            print(f"[DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} —É–¥–∞–ª—ë–Ω –∏–∑ user_data (–Ω–µ—Ç –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏).")
            del user_data[user_name]

    print("[DEBUG] user_data –æ–±–Ω–æ–≤–ª–µ–Ω–æ:", user_data)

async def view_schedule(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É—á–µ–Ω–∏–∫–∞."""
    user_name = update.effective_chat.username
    user_data = temporary_schedule.get(user_name)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not user_data or not isinstance(user_data, dict) or 'schedule' not in user_data:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        return

    user_schedule = user_data.get("schedule")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–ø–∏—Å–∫–æ–º
    if not isinstance(user_schedule, list):
        print(f"[WARNING] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name}.")
        await update.message.reply_text("–í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—à–∏–±–∫—É. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    message = "\n".join([
        f"{lesson['day']} {lesson['time']} - {lesson.get('description', '')}"
        for lesson in user_schedule if isinstance(lesson, dict)  # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —É—Ä–æ–∫ ‚Äî —Å–ª–æ–≤–∞—Ä—å
    ])

    if not message:  # –ï—Å–ª–∏ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —É—Ä–æ–∫–æ–≤
        await update.message.reply_text("–í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    user_full_name = user_data.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
    await update.message.reply_text(f"–í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, {user_full_name}:\n{message}")

async def view_students(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)."""
    if update.effective_chat.id != ADMIN_ID:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    print(f"[DEBUG] user_data –ø–µ—Ä–µ–¥ –≤—ã–≤–æ–¥–æ–º —É—á–µ–Ω–∏–∫–æ–≤: {user_data}")

    if not user_data:
        await update.message.reply_text("–°–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.")
    else:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        message = "\n".join([f"@{username}" for username in user_data.keys()])
        await update.message.reply_text(f"–°–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n{message}")

async def view_all(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)."""
    if update.effective_chat.id != ADMIN_ID:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    if not temporary_schedule:
        await update.message.reply_text("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É—Å—Ç–æ–µ –∏–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ.")
        return

    try:
        message = []
        for user, data in temporary_schedule.items():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if not isinstance(data, dict) or 'schedule' not in data or 'name' not in data:
                print(f"[WARNING] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                continue

            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_name = data.get('name', user)
            user_schedule = data.get('schedule', [])

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ ‚Äî —Å–ø–∏—Å–æ–∫
            if not isinstance(user_schedule, list):
                print(f"[WARNING] –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name} –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                continue

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_schedule_text = "\n".join([
                f"{lesson['day']} {lesson['time']} - {lesson.get('description', '')}"
                for lesson in user_schedule if isinstance(lesson, dict)
            ])

            if user_schedule_text:  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —É—Ä–æ–∫–∏
                message.append(f"{user_name}:\n{user_schedule_text}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
        if not message:
            await update.message.reply_text("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        await update.message.reply_text("\n\n".join(message))

    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.")

async def manual_reset(update: Update, context: CallbackContext):
    """–†—É—á–Ω–æ–π —Å–±—Ä–æ—Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)."""
    if update.effective_chat.id != ADMIN_ID:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    reset_schedule()
    await update.message.reply_text("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω–æ –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É.")

async def add_schedule(update: Update, context: CallbackContext):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∏–ª–∏ –∏–∑–º–µ–Ω—è–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)."""
    if update.effective_chat.id != ADMIN_ID:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    try:
        user_id = context.args[0]  # –ò–º—è —É—á–µ–Ω–∏–∫–∞
        day = context.args[1]  # –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏
        time = context.args[2]  # –í—Ä–µ–º—è
        description = " ".join(context.args[3:])  # –û–ø–∏—Å–∞–Ω–∏–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)

        new_lesson = {"day": day, "time": time, "description": description}

        if user_id in temporary_schedule:
            temporary_schedule[user_id].append(new_lesson)
        else:
            temporary_schedule[user_id] = [new_lesson]

        await update.message.reply_text(f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {user_id} –æ–±–Ω–æ–≤–ª–µ–Ω–æ:\n{day} {time} - {description}")
    except (IndexError, ValueError):
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n/add_schedule user_id –¥–µ–Ω—å –≤—Ä–µ–º—è –æ–ø–∏—Å–∞–Ω–∏–µ")
# --- –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é ---
def get_main_menu(is_admin=False):
    """–°–æ–∑–¥–∞—ë—Ç –º–µ–Ω—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã."""
    buttons = [[KeyboardButton("–°—Ç–∞—Ä—Ç")]]  # –ö–Ω–æ–ø–∫–∞ "–°—Ç–∞—Ä—Ç" –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤—Å–µ–º

    if is_admin:
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        buttons.extend([
            [KeyboardButton("–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")],
            [KeyboardButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"), KeyboardButton("–°–±—Ä–æ—Å–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")],
            [KeyboardButton("–£—á–µ–Ω–∏–∫–∏")]
        ])
    else:
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —É—á–µ–Ω–∏–∫–∞
        buttons.append([KeyboardButton("–ú–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")])

    return ReplyKeyboardMarkup(buttons, resize_keyboard=True)
# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ ---
async def button_handler(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–æ–∫."""
    user_id = update.effective_chat.id
    text = update.message.text

    if text == "–ú–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ":
        await view_schedule(update, context)
    elif text == "–°—Ç–∞—Ä—Ç":
        await start(update, context)
    elif text == "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ" and user_id == ADMIN_ID:
        await view_all(update, context)
    elif text == "–°–±—Ä–æ—Å–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ" and user_id == ADMIN_ID:
        reset_schedule()
        await update.message.reply_text("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω–æ.")
    elif text == "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ" and user_id == ADMIN_ID:
        await update.message.reply_text("–î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /add_schedule.")
    elif text == "–£—á–µ–Ω–∏–∫–∏" and user_id == ADMIN_ID:
        await view_students(update, context)
    else:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã
        await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏.")
# --- –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á ---
def schedule_jobs(application: Application):
    """
    –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á.
    """
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å event loop
        try:
            loop = asyncio.get_running_loop()
        except RuntimeError:
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)

        print(f"[DEBUG] –¢–µ–∫—É—â–∏–π event_loop: {loop}")
    except RuntimeError as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ —Å event_loop: {e}")
        return  # –í—ã—Ö–æ–¥–∏–º, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å event loop

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    scheduler = AsyncIOScheduler(event_loop=loop)

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏
    try:
        # –ó–∞–¥–∞—á–∞: –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 24 —á–∞—Å–∞
        scheduler.add_job(
            send_reminders_24h,
            trigger="interval",
            minutes=15,  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
            args=[application],
            id="send_reminders_24h"
        )
        print("[DEBUG] –ó–∞–¥–∞—á–∞ send_reminders_24h —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞.")

        # –ó–∞–¥–∞—á–∞: –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 1 —á–∞—Å
        scheduler.add_job(
            send_reminders_1h,
            trigger="interval",
            minutes=5,  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
            args=[application],
            id="send_reminders_1h"
        )
        print("[DEBUG] –ó–∞–¥–∞—á–∞ send_reminders_1h —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞.")

        # –ó–∞–¥–∞—á–∞: —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–∞–∂–¥—É—é —Å—É–±–±–æ—Ç—É –≤ 23:00
        scheduler.add_job(
            reset_schedule,
            CronTrigger(day_of_week="sun", hour=23, minute=0),
            id="reset_schedule"
        )
        print("[DEBUG] –ó–∞–¥–∞—á–∞ reset_schedule —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞.")

        # –ó–∞–¥–∞—á–∞: –æ–±–Ω–æ–≤–ª—è—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        scheduler.add_job(
            update_user_data,
            trigger="interval",
            minutes=5,
            id="update_user_data"
        )
        print("[DEBUG] –ó–∞–¥–∞—á–∞ update_user_data —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞.")

        # –ó–∞–¥–∞—á–∞: –æ—á–∏—â–∞—Ç—å —Å—Ç–∞—Ä—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 00:00
        scheduler.add_job(
            clean_sent_reminders,
            CronTrigger(hour=0, minute=0),
            id="clean_sent_reminders"
        )
        print("[DEBUG] –ó–∞–¥–∞—á–∞ clean_sent_reminders —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: {e}")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    try:
        scheduler.start()
        print("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –∑–∞–ø—É—â–µ–Ω.")
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")

async def test_send_message(application):
    """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É."""
    try:
        await application.bot.send_message(chat_id=ADMIN_ID, text="–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!")
        print("[DEBUG] –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ.")
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
# --- –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---
def main():
    global temporary_schedule
    reset_schedule()  # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å GitHub

    app = Application.builder().token(BOT_TOKEN).build()

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    schedule_jobs(app)
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("view_all", view_all))
    app.add_handler(CommandHandler("add_schedule", add_schedule))
    app.add_handler(CommandHandler("reset", manual_reset))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, button_handler))
    app.add_handler(CommandHandler("get_my_id", get_my_id))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")


